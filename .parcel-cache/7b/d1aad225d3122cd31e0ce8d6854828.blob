var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _three = require("three");
class Sketch {
    constructor(options){
        this.time = 0;
        this.dom = options.dom;
        this.scene = new _three.Scene();
        this.width = dom.offsetWidth;
        this.height = dom.offsetHeight;
        this.camera = new _three.PerspectiveCamera(70, this.width / this.height, 0.01, 10);
        this.camera.position.z = 1;
        this.renderer = new _three.WebGLRenderer({
            antialias: true
        });
        this.renderer.setSize(this.width, thiseight);
        this.renderer.setAnimationLoop(animation);
        document.body.appendChild(renderer.domElement);
        this.addObjects();
        this.render();
    }
    resize() {
    }
    addObjects() {
        this.geometry = new _three.BoxGeometry(0.2, 0.2, 0.2);
        this.material = new _three.MeshNormalMaterial();
        mesh = new _three.Mesh(geometry, material);
        scene.add(mesh);
    }
    render() {
        this.time += 0.5;
        this.mesh.rotation.x = this.time / 2000;
        this.mesh.rotation.y = this.time / 1000;
        this.renderer.render(scene, camera);
        window.requestAnimationFrame(this.render.bind(this));
    }
}
exports.default = Sketch;
new Sketch({
    dom: document.getElementById('container')
}); /*let camera, scene, renderer;
let geometry, material, mesh;

init();

function init() {

	camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );
	camera.position.z = 1;

	scene = new THREE.Scene();


	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setSize( window.innerWidth, window.innerHeight );
	renderer.setAnimationLoop( animation );
	document.body.appendChild( renderer.domElement );

}

function animation( time ) {

	mesh.rotation.x = time / 2000;
	mesh.rotation.y = time / 1000;

	renderer.render( scene, camera );

}
*/ 
